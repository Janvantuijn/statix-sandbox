module statics/mod

imports statics/base
imports statics/variable
imports signatures/mod-sig

signature
  constructors // modules
    MOD : scope -> TYPE

    
rules // modules 

  declOk(s, Module(m, decls)) :- {s_mod}
    new s_mod, 
    s_mod -P-> s,
    declareMod(s, m, MOD(s_mod)),
    declsOk(s_mod, decls).
        
  declOk(s, Import(p)) :- {s_mod s_end} 
    resolvePathImp(s, p) == s_end,
    s -I-> s_end.
           
rules // module reference
        
  typeOfExp(s, ModRef(p, x)) = T :- {s_p}
    resolvePathRef(s, p) == s_p,
    typeOfVar(s_p, x) == T. 
    // TODO: x could also refer to a type?
    
  proj(MOD(s_mod), x) = typeOfVar(s_mod, x).
      
rules

  resolvePathImp : scope * Path -> scope 
  resolvePathRef : scope * Path -> scope 
  
  resolvePathImp(s, Path([x | xs])) = s_end :- {s_mod} 
    typeOfModPar(s, x) == MOD(s_mod),
    resolvePathL(s_mod, xs) == s_end.
  
  resolvePathRef(s, Path([x | xs])) = s_end :- {s_mod} 
    typeOfModRef(s, x) == MOD(s_mod),
    resolvePathL(s_mod, xs) == s_end.
    
  resolvePathL : scope * list(ID) -> scope
  
  resolvePathL(s, []) = s.
  
  resolvePathL(s, [x | xs]) = s_end :- {s_mod}
    typeOfModMember(s, x) == MOD(s_mod),
    resolvePathL(s_mod, xs) == s_end. 
    
    
signature
  namespaces
    Mod  : string 
  name-resolution
    resolve Mod 
      filter P P* I* 
      min $ < I, $ < P, I < P, R < P  
    
rules // module binding 

  declareMod      : scope * string * TYPE
  declareModRaw   : scope * string * TYPE
  typeOfModRef    : scope * string -> TYPE
  typeOfModPar    : scope * string -> TYPE
  typeOfModMember : scope * string -> TYPE
  
  declareMod(s, x, T) :-   
    s -> Mod{x} with typeOfDecl T,
    @x.type := T,   
    query typeOfDecl
      filter P* I* and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x }, T))] 
          | error $[Duplicate definition of module [x]].
     
  typeOfModRef(s, x) = T :- {x'}
    query typeOfDecl
      filter P* I* and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x' }, T))|_] 
      | error $[Module [x] not defined],
    @x.ref := x',
    @x.type := T.
    
  typeOfModPar(s, x) = T :- {x'}
    query typeOfDecl
      filter P P* I* and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x' }, T))|_] 
      | error $[Module [x] not defined],
    @x.ref := x',
    @x.type := T.
    
  typeOfModMember(s, x) = T :- {x'}
    query typeOfDecl
      filter e and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x' }, T))|_] 
      | error $[Module [x] not defined],
    @x.ref := x',
    @x.type := T.
          
        
