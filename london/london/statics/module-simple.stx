module statics/module-simple

imports statics/base
imports statics/variable
imports signatures/module-simple-sig

signature
  constructors
    MOD : scope -> TYPE
    
rules 

  declOk(s, Module(m, decls)) :- {s_mod}
    new s_mod, 
    s_mod -P-> s,
    declareMod(s, m, MOD(s_mod)),
    declsOk(s_mod, decls).
        
  declOk(s, Import(p)) :- {s_mod} 
    typeOfModRef(s, p) == MOD(s_mod),
    s -I-> s_mod.  
           
rules // module reference
        
  typeOfExp(s, ModRef(m, x)) = proj(typeOfModRef(s, m), x).
    
  proj(MOD(s_mod), x) = typeOfVar(s_mod, x).
  
signature
  namespaces
    Mod  : string 
  name-resolution
    resolve Mod 
      filter P P* I*
      min $ < I, $ < P, I < P, R < P 
           
rules // module binding 

  declareMod      : scope * string * TYPE
  declareModRaw   : scope * string * TYPE
  typeOfModRef    : scope * string -> TYPE
  typeOfModPar    : scope * string -> TYPE
  typeOfModMember : scope * string -> TYPE
  
  declareMod(s, x, T) :-   
    s -> Mod{x} with typeOfDecl T,   
    query typeOfDecl
      filter P*  and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x }, T))] 
          | error $[Duplicate definition of module [x]].
       
  typeOfModRef(s, x) = T :- {x'}
    typeOfDecl of Mod{x} in s |-> [(_, (Mod{x'}, T))|_] 
             | error $[Module [x] not defined],
               // permissive lookup to cope with double declaration 
    @x.ref := x'.

//  typeOfModRef(s, x) = T :- {x'}
//    query typeOfDecl
//      filter P P* I* and { Mod{ y @_ } :- y == x }
//          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
//          in s |-> [(_, (Mod{ x' }, T))|_] 
//      | error $[Module [x] not defined],
//    @x.ref := x'.
    
  typeOfModPar(s, x) = T :- {x'}
    query typeOfDecl
      filter P P* I* and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x' }, T))|_] 
      | error $[Module [x] not defined],
    @x.ref := x'.
    
  typeOfModMember(s, x) = T :- {x'}
    query typeOfDecl
      filter e and { Mod{ y @_ } :- y == x }
          min $ < I, $ < P, I < P, R < P and { _, _ :- true }
          in s |-> [(_, (Mod{ x' }, T))|_] 
      | error $[Module [x] not defined],
    @x.ref := x'.
          
         
//  lookupMod       : scope * string -> TYPE
//  lookupMod(s, x) = T :- {x'}
//    typeOfDecl of Mod{x} in s |-> [(_, (Mod{x'}, T))|_] 
//             | error $[Module [x] not defined], 
//               // permissive lookup to cope with double declaration 
//    @x.ref := x'.
