module analysis

imports

  statixruntime
  statix/api 

  pp
  injections/-
  injections/lang/base/syntax-injections
  injections/lang/file/syntax-injections
rules // Analysis

  // see README.md for details on how to switch to multi-file analysis

  // single-file analysis
  //editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "programOk")
  
  // multi-file analysis
  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")

//<<<<<<< HEAD
//  pre-analyze  = explicate-injections-london
//  post-analyze = implicate-injections-london
//  //post-analyze = id /* strip-annos; implicate-injections-london */ 
//=======
  pre-analyze  = explicate-injections-london-Program
  post-analyze = implicate-injections-london-Program
//>>>>>>> ca3684bc9a9c17ee970bb3a94040704b6ee74097

rules // Editor Services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover


rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected
