module lang/variable/statics

imports lang/base/statics
imports signatures/lang/variable/syntax-sig

//signature
//  constructors
//    Var   : ID -> Exp
//    Def   : Bind -> Decl 
//    Bind  : ID * Exp -> Bind
//    BindT : ID * Type * Exp -> Bind
    
rules
    
  typeOfExp(s, Var(x)) = typeOfVar(s, x).
    
rules

  declOk(s, Def(bind)) :- 
    bindOk(s, s, bind).
    
rules

  bindOk(s_bnd, s_ctx, Bind(x, e)) :- {T}
    typeOfExp(s_ctx, e) == T,
    declareVar(s_bnd, x, T).
    
  bindOk(s_bnd, s_ctx, BindT(x, t, e)) :- {T1 T2}
    typeOfType(s_ctx, t) == T1,
    declareVar(s_bnd, x, T1),
    typeOfExp(s_ctx, e) == T2,
    subtype(e, T2, T1) 
    | error $[type of expression [T2] does not match expected type [T1]].

 
rules // variable binding 
 
  declareVar : scope * string * TYPE
  typeOfVar  : scope * string -> TYPE
    
  declareVar(s, x, T) :-   
    s -> Var{x} with typeOfDecl T, 
    typeOfDecl of Var{x} in s |-> [(_, (_, T))] 
             | error $[Duplicate definition of variable [x]].
               // declaration is distinct
  
  typeOfVar(s, x) = T :- {x'}
    typeOfDecl of Var{x} in s |-> [(_, (Var{x'}, T))|_] 
             | error $[Variable [x] not defined],
               // permissive lookup to cope with double declaration 
    @x.ref := x'.
    
signature    
  namespaces
    Var : string
  name-resolution
    resolve Var 
      filter P* (R* | I*) 
      min $ < I, $ < P, I < P, R < P 
      
//signature    
//  namespaces
//    Var : string
//  name-resolution
//    resolve Var 
//      filter (P | I)*
//      min $ < I, $ < P , I < P, R < P 
      
//signature    
//  namespaces
//    Var : string
//  name-resolution
//    resolve Var filter P* R* min $ < P, R < P
    
//signature    
//  namespaces
//    Var : string
//  name-resolution
//    resolve Var filter P* min $ < P
    
//signature    
//  namespaces
//    Var : string
//  name-resolution
//    resolve Var filter P* 
    
//signature    
//  namespaces
//    Var : string
//  name-resolution
//    resolve Var filter e
      
//rules // variable binding 
//
//  declareVar : scope * string * TYPE
//  typeOfVar  : scope * string -> TYPE
//    
//  declareVar(s, x, T) :-   
//    s -> Var{x} with typeOfDecl T.
//  
//  typeOfVar(s, x) = T :- {x'}
//    typeOfDecl of Var{x} in s |-> [(_, (Var{x'}, T))].
    