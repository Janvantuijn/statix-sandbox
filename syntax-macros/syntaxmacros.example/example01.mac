1 

(def plus "__plus") 
(def mul "__mul")

plus
 
(plus plus)

(plus 1 2)

(plus (plus 1) 3)

(lambda (x) (plus x)) 

(def inc (lambda (x) (plus x 1)))

(inc (plus (inc 1) 3))

(macro (sqr e) (mul e e))

(sqr 3)
 
(macro (let (x e1) e2)
  ((lambda (x) e2) e1))

(let (a 1) (inc a)) 
 
//(macro (double e) 
//  (let tmp e (plus tmp tmp)))
//  
//(def tmp 4)
//
//(double tmp) 


 

